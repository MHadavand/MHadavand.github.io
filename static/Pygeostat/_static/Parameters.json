{"PygeostatParameters": {"config.autoload.parameters": {"Value": true, "Description": "If `True` the `gsParams` configurations found in\n``%USER%/.gsParams`` are parsed and loaded when pygeostat loads"}, "config.autoload.plot_style": {"Value": false, "Description": "If `True` the `gsPlotStyle` configurations found in\n``%USER%/.gsParams`` are parsed and loaded when pygeostat loads"}, "config.getpar": {"Value": false, "Description": "If True, getpar=True when calling pygeostat.Program() with getpar=None"}, "config.ignore_mpl_warnings": {"Value": true, "Description": "If True, matplotlib warnings will be ignored!"}, "config.nprocess": {"Value": 4, "Description": "The number of parallel processes to run functions that provide that functionality"}, "config.use_shipped_executable": {"Value": true, "Description": "If `True` adds the shipped executable files to the path environmental variable"}, "config.verbose": {"Value": true, "Description": "If `true`, mentions when the `gsParams` are updated automatically when pygeostat is loaded. Useful for interactive sessions"}, "data.cat": {"Value": null, "Description": "When initializing a DataFile, this str will be used as DataFile.cat if it is in DataFile.columns, e.g., Facies"}, "data.catdict": {"Value": {"1": "Inside", "0": "Outside"}, "Description": "When initializing a DataFile, this dictionary will be used as DataFile.catdict (if catdict.keys() matches DataFile.cat codes). This dictionary is formaatted as {catcodes: catnames}."}, "data.dh": {"Value": null, "Description": "When initializing a DataFile, this str will be used as DataFile.dh if it is in DataFile.columns, e.g., WellID"}, "data.fix_legacy_null": {"Value": false, "Description": "Automatically fix legacy null values if encountered and trimming null values"}, "data.griddef": {"Value": "120 5.0 10.0 \n110 1205.0 10.0 \n1 0.5 1.0", "Description": "When initializing a DataFile, this will be used as DataFile.GridDef if GridDef.count() matches DataFile.shape[0]. A pygeostat.GridDef object or valid gridstr/gridarr may be used for intitialization."}, "data.ifrom": {"Value": null, "Description": "When initializing a DataFile, this str will be used as DataFile.ifrom if it is in DataFile.columns, e.g., From"}, "data.io.pandas_engine": {"Value": "python", "Description": "Default engine to use for pandas read, either `python` or `c`"}, "data.ito": {"Value": null, "Description": "When initializing a DataFile, this str will be used as DataFile.ito if it is in DataFile.columns, e.g., To"}, "data.legacy_null": {"Value": [-999, -998, -99, -98], "Description": "Nulls used by default in some GSLIB programs that can be fixed if encountered"}, "data.nreal": {"Value": 100, "Description": "The number of realizations for modeling (once implemented) and model checking."}, "data.null": {"Value": -999.0, "Description": "NaN values are assigned this number (float or int) by io write functions (excluding write_vtk), e.g., -99, -999, or -999.0. Using None disables the functionality, but will likely lead to issues in the case of subsequent GSLIB operations."}, "data.null_vtk": {"Value": 0.0, "Description": "NaN values are assigned this number (float or int) by the write_vtk function, e.g., -99, -999, or -999.0. Using None disables the functionality, which is recommended since NaN values are handled by Paraview."}, "data.tmin": {"Value": -998.0, "Description": "Values less than this number (float or int) are assigned NaN on import by all io read functions, e.g., -98 or -998. Using -1.0e21 or False disables this functionality."}, "data.weights": {"Value": null, "Description": "When initializing a DataFile, this str or list will be used as DataFile.wts if wts is in DataFile.columns, e.g., DeclusteringWeight"}, "data.write.python_floatfmt": {"Value": "%.6f", "Description": "A format string to use for `gslib` fltypes (written with pandas)"}, "data.write_vtk.cdtype": {"Value": "float64", "Description": "Precision of coordinates when writing to VTK. Must be a valid numpy specifier, such as \"float32\", \"float64\", etc."}, "data.write_vtk.vdtype": {"Value": "float64", "Description": "Precision of variables when writing to VTK. Must be a valid numpy specifier, such as \"float32\", \"float64\", \"int8\", etc."}, "data.x": {"Value": null, "Description": "When initializing a DataFile, this st will be used as DataFile.x if it is in DataFile.columns, e.g., Easting"}, "data.y": {"Value": null, "Description": "When initializing a DataFile, this str will be used as DataFile.y if it is in DataFile.columns, e.g., Northing"}, "data.z": {"Value": null, "Description": "When initializing a DataFile, this str will be used as DataFile.z if it is in DataFile.columns, e.g., Elevation"}, "plotting.assumecat": {"Value": 11, "Description": "When executing plotting functions, data is assumed to be categorical for the purposes of selecting colormaps, if less than this number of unique values are found"}, "plotting.axis_xy": {"Value": false, "Description": "Converts plotting axes to GSLIB-style visibility (only left and bottom visible) if axis_xy is True. See plotting.axis_xy_spatial for the default setting of functions such as slice_plot and location_plot."}, "plotting.axis_xy_spatial": {"Value": false, "Description": "axis_xy setting that is specific to spatial plotting functions such as location_plot and slice_plot. Provided since many users prefer axis_xy to be applied to all plots (via plotting.axis_xy) other than spatial plots. "}, "plotting.cmap": {"Value": "bwr", "Description": "Matplotlib colormap object or a registered Matplotlib colormap, which is used for continuous variables"}, "plotting.cmap_cat": {"Value": "bwr", "Description": "Matplotlib colormap object or a registered Matplotlib colormap, which is used for categorical variables"}, "plotting.gammasize": {"Value": 3.0, "Description": "The size of gamma symbols in variogram plots are Matplotlib.rcParams[\"font.size\"] multiplied with this value."}, "plotting.grid": {"Value": false, "Description": "If True, a grid is plotted in pygeostat ploting function unless, overridden by the associated kwarg"}, "plotting.histogram_plot.cdfcolor": {"Value": ".5", "Description": "Color of the CDF for the histogram_plot function."}, "plotting.histogram_plot.edgecolor": {"Value": "k", "Description": "Color of the histogram edges for the histogram_plot function."}, "plotting.histogram_plot.edgeweight": {"Value": null, "Description": "`lw` of the histogram edges for the histogram_plot function."}, "plotting.histogram_plot.facecolor": {"Value": ".9", "Description": "Color of the histogram faces for the histogram_plot function."}, "plotting.histogram_plot.histbins": {"Value": 15, "Description": "Number of bins for a histogram (not CDF) calculation."}, "plotting.histogram_plot.stat_blk": {"Value": "all", "Description": "Default stat_blk setting, which is either a string code, such as all or minimal, or a list of valid statistic names"}, "plotting.histogram_plot.stat_xy": {"Value": [0.95, 0.95], "Description": "Location of the histogram stats location as a tuple of (xloc, yloc), where the locations should be between 0 and 1."}, "plotting.histogram_plot.stat_xy_cdf": {"Value": [0.95, 0.05], "Description": "Location of the CDF stats location as a tuple of  (xloc, yloc), where the locations should be 0 to 1."}, "plotting.histogram_plot_simulation.alpha": {"Value": 0.5, "Description": "Transparency of the realizations CDFs"}, "plotting.histogram_plot_simulation.refclr": {"Value": "C3", "Description": "Color of the reference CDF"}, "plotting.histogram_plot_simulation.simclr": {"Value": "0.2", "Description": "Color of the realization CDFs"}, "plotting.lagname": {"Value": "Lag Distance", "Description": "Name (str) to use on the x-axis of variogram plots, e.g., Lag or h"}, "plotting.location_plot.c": {"Value": ".4", "Description": "Color of scatter in location_plot (and slice_plot), which is a valid Matplotlib color specifier"}, "plotting.location_plot.lw": {"Value": 5.0, "Description": "Line width for location plot if the orient is xz or yz and the drill hole id is provided/inferred"}, "plotting.location_plot.s": {"Value": 20.0, "Description": "Size of scatter in location_plot (and slice_plot), which is based on Matplotlib.rcParams if None"}, "plotting.log_lowerval": {"Value": 0.0001, "Description": "For a log axis, specify the default lower value that replaces a 0.0 or negative valued data. Applies to both axes."}, "plotting.nticks": {"Value": null, "Description": "Specify the target number of ticks for plotting, as an integer, or tuple/list of integers specifying the number of ticks on the x and y axis, respectively"}, "plotting.rotateticks": {"Value": [0, 0], "Description": "If None, the pygeostat tickoverlap attempts to optimize tick, label angles to minimize overlap in the absence of a kwarg., If [xangle, yangle] (e.g., [0, 0], then these angles are used in the absence of a kwarg."}, "plotting.roundstats": {"Value": true, "Description": "Display a set number of significant figures (False) or digits (True) for statistics in plots."}, "plotting.scatter_plot.alpha": {"Value": 1.0, "Description": "Alpha transparency of scatter in scatter_plot, which should be between 0 and 1."}, "plotting.scatter_plot.c": {"Value": "kde", "Description": "Color of scatter in scatter_plot, which is either a valid Matplotlib color specifier, or the \"KDE\" string. KDE leads to calculation of the kernel density estimate at each scatter location"}, "plotting.scatter_plot.cmap": {"Value": "viridis", "Description": "Matplotlib colormap object or a registered Matplotlib colormap which overrides plotting.cmap"}, "plotting.scatter_plot.s": {"Value": null, "Description": "Size of scatter in scatter_plot, which is based on Matplotlib.rcParams if None"}, "plotting.scatter_plot.stat_blk": {"Value": "pearson", "Description": "Statistics that are plotted in scatter_plot, which should be either \"all\" or a list that may contains the strings: [\"count\", \"pearson\", \"spearmanr\"]"}, "plotting.scatter_plot.stat_xy": {"Value": [0.95, 0.05], "Description": "A 2-list that provides the x/y location of the statistics block"}, "plotting.sigfigs": {"Value": 2, "Description": "Significant figures (roundstats=False) or digits (roundstats=True) for statistics in plots."}, "plotting.stat_fontsize": {"Value": null, "Description": "Font size of statistics in pygeosat plots. If None, then the font size matches rcParams[font.size]. If a fraction, then the font size is rcParams[font.size]*stat_fontsize. If greater than or equal to 1, then stat_fontsize is the font size."}, "plotting.stat_ha": {"Value": "right", "Description": "The horizontal alignment of statistics in plots, which should be one of \"right\", \"left\" or \"center\""}, "plotting.stat_linespacing": {"Value": 1.0, "Description": "The line spacing to use for statistics blocks in plots. Default is 1.0"}, "plotting.unit": {"Value": "m", "Description": "The unit (str) that appears in spatial/map/variogram plots e.g., m or ft. Use None if no unit should be displayed."}, "plotting.variogram_plot.color": {"Value": ".5", "Description": "Color for variogram_plot "}, "plotting.variogram_plot.ms": {"Value": 6.0, "Description": "Marker size for variogram_plot (e.g. experimental dot size) "}, "plotting.variogram_plot_simulation.alpha": {"Value": 0.5, "Description": "Transparency of the realizations variograms"}, "plotting.variogram_plot_simulation.refclr": {"Value": "C3", "Description": "Color of the reference variogram"}, "plotting.variogram_plot_simulation.simclr": {"Value": "0.2", "Description": "Color of the realization variograms"}, "plotting.variogram_plotsim.alpha": {"Value": 0.5, "Description": "Transparency of the realizations variograms"}, "plotting.variogram_plotsim.refclr": {"Value": "C3", "Description": "Color of the reference variogram"}, "plotting.variogram_plotsim.simclr": {"Value": "0.2", "Description": "Color of the realization variograms"}, "plotting.vplot.colors": {"Value": ["C0", "C1", "C2"], "Description": "Colors of the major, minor and vertical direction variograms, which is used by the Variogram.plot function. May be a 3-list, or a color pallete in gs.avail_palettes"}, "plotting.xabbrev": {"Value": "E", "Description": "Abbreviated name (str) that is used for the x coordinate label for map/cross-section plots, e.g., Easting or X"}, "plotting.xname": {"Value": "Easting", "Description": "Name (str) that is used for the x coordinate label for map/cross-section plots, e.g., Easting or X"}, "plotting.yabbrev": {"Value": "N", "Description": "Abbreviated name (str) that is used for the y coordinate label for map/cross-section plots, e.g., Northing or Y"}, "plotting.yname": {"Value": "Northing", "Description": "Name (str) that is used for the y coordinate label for map/cross-section plots, e.g., Northing or Y"}, "plotting.zabbrev": {"Value": "Elev", "Description": "Abbreviated name (str) that is used for the z coordinate label for map/cross-section plots, e.g., Elevation or Z"}, "plotting.zname": {"Value": "Elevation", "Description": "Name (str) that is used for the z coordinate label for map/cross-section plots, e.g., Elevation or Z"}}}